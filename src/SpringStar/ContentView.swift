//
//  ContentView.swift
//  SpringStar
//
//  Created by Jelly on 9/17/25.
//
import SwiftUI
import RealityKit
import Combine

// All helix related code was generated by ChatGPT for the sandbox
// This code will not go to production, this is for exploratory purposes
struct ContentView: View {
    @State private var springEntity: ModelEntity?
    @State private var cylinderEntity: ModelEntity?
    @State private var pitch: Float = 0.05
    @State private var increasing = true
    @State private var timerCancellable: Cancellable?

    var body: some View {
        RealityView { content in
            let cyl = Cylinder(height: 0.25, radius: 0.125)
            print("Volume: ", cyl.volume)
            print("Lateral Surface Area: ", cyl.lateralSurfaceArea)
            print("Total Surface Area: ", cyl.totalSurfaceArea)
            
            if cylinderEntity == nil {
                do {
                    let mesh = try cyl.Cylinder()
                    let material = SimpleMaterial(color: .gray, isMetallic: true)
                    let entity = ModelEntity(mesh:mesh, materials: [material])
                    //content.add(entity)
                    cylinderEntity = entity
                } catch {
                    print("no cylinder ho", error)
                }
            }
            
            if springEntity == nil {
                do {
                    let mesh = try generateHelixMesh(pitch: pitch)
                    let material = SimpleMaterial(color: .gray, isMetallic: true)
                    let entity = ModelEntity(mesh: mesh, materials: [material])
                    content.add(entity)
                    springEntity = entity
                } catch {
                    print("Error generating spring mesh:", error)
                }
            }

            if timerCancellable == nil {
                timerCancellable = Timer.publish(every: 0.03, on: .main, in: .common)
                    .autoconnect()
                    .sink { _ in
                        updateSpring()
                    }
            }
        }
        .onDisappear {
            timerCancellable?.cancel()
            timerCancellable = nil
        }
    }

    func updateSpring() {
        if increasing {
            pitch += 0.002
            if pitch >= 0.12 { increasing = false }
        } else {
            pitch -= 0.002
            if pitch <= 0.03 { increasing = true }
        }

        do {
            let newMesh = try generateHelixMesh(pitch: pitch)
            springEntity?.model?.mesh = newMesh
        } catch {
            print("Failed to update spring mesh:", error)
        }
    }
}
